$box_image = ENV['BOX_IMAGE'] || 'generic/ubuntu2004'.freeze

CLUSTER_NAME = ENV['CLUSTER_NAME']

# Disk setup
DISK_SIZE_GB = ENV['DISK_SIZE_GB'].to_i || 32

# Resources
MASTER_CPUS = ENV['MASTER_CPUS'].to_i || 4
MASTER_MEMORY_SIZE_GB = ENV['MASTER_MEMORY_SIZE_GB'].to_i || 16
NODE_CPUS = ENV['NODE_CPUS'].to_i || 4
NODE_MEMORY_SIZE_GB = ENV['NODE_MEMORY_SIZE_GB'].to_i || 16

$docker_version = '5:19.03.12~3-0~ubuntu-focal'

# Network
MASTER_IP = ENV['MASTER_IP'] || '192.168.0.254'
POD_NW_CIDR = ENV['POD_NW_CIDR'] || '172.16.0.0/16'
NODE_IP_NW = ENV['NODE_IP_NW'] || '192.168.0.'
NODE_IP = NODE_IP_NW + (NODE + 10).to_s
DNS_SERVER = ENV['DNS_SERVER'] || '8.8.8.8'
VAGRANT_VM_PROXY = ENV['VAGRANT_VM_PROXY'] || ''

# Addons
K8S_DASHBOARD = ENV['K8S_DASHBOARD'].downcase == "true" || false
K8S_DASHBOARD_VERSION = ENV['K8S_DASHBOARD_VERSION'] || 'v1.10.1'

# Kubernetes and kubeadm
KUBERNETES_VERSION = ENV['KUBERNETES_VERSION'] || ''
$kubernetes_pkg_version_suffix = ENV['KUBERNETES_PKG_VERSION_SUFFIX'] || ""
if $kubernetes_pkg_version_suffix == ''
    $kubernetes_pkg_version_suffix = '-00'
end

$kubeadm_init_flags = ENV['KUBEADM_INIT_FLAGS'] || ''
$kubeadm_join_flags = ENV['KUBEADM_JOIN_FLAGS'] || ''
if KUBERNETES_VERSION != "" && $kubeadm_init_flags == ""
    $kubeadm_init_flags = "--kubernetes-version=#{KUBERNETES_VERSION}"
end

KUBE_PROXY_IPVS = ENV['KUBE_PROXY_IPVS'] || false

# Generate new using steps in README
KUBETOKEN = ENV['KUBETOKEN'] || 'b029ee.968a33e8d8e6bb0d'

aliases = %q{
alias s="sudo -s"
alias lh="ls -alh"
alias d="docker"
alias dl="docker logs"
alias dlf="docker logs -f"
alias dlv='docker logs -f \$(docker ps |grep k8s_vpp_calico-vpp-node | awk "{print \\\\\$1}")'
alias dp="docker ps"
alias dpa="docker ps -a"
alias dpv="docker ps -a |grep vpp"
alias vc='docker exec -it \$(docker ps |grep k8s_vpp_calico-vpp-node | awk "{print \\\\\$1}") vppctl'
alias dsv='docker stop \$(docker ps |grep k8s_vpp_calico-vpp-node | awk "{print \\\\\$1}")'
alias nodelogs='docker exec \$(docker ps |grep k8s_calico-node_calico-vpp-node | awk "{print \\\\\$1}") tail -500f /var/log/calico/calico-vpp-agent/current'
alias allnodelogs='docker exec \$(docker ps |grep k8s_calico-node_calico-vpp-node | awk "{print \\\\\$1}") cat /var/log/calico/calico-vpp-agent/current'
alias dsn='docker stop \$(docker ps |grep k8s_calico-node_calico-vpp-node | awk "{print \\\\\$1}")'
alias idu="ip link set eth1 down; ip link set eth1 up"
alias ifr="ip link set vppatp0 down; echo '0000:00:06.0' > /sys/bus/pci/devices/0000\:00\:06.0/driver/unbind; sleep 0.2; echo '0000:00:06.0' > /sys/bus/pci/drivers/virtio-pci/bind; sleep 0.5; ip link set eth1 up"
}

# Common scripts
$prepareScript = <<SCRIPT
cat <<EOF >> /root/.bashrc
#{aliases}
EOF
cat <<EOF >> /home/vagrant/.bashrc
#{aliases}
EOF

resize2fs /dev/vda3

sed -i 's/^DNS=.*/DNS=#{DNS_SERVER}/' /etc/systemd/resolved.conf
sed -i 's/^DNSSEC=.*/DNSSEC=no/' /etc/systemd/resolved.conf
sed -i 's/addresses:.*/addresses: [#{DNS_SERVER}]/' /etc/netplan/01-netcfg.yaml
netplan apply
systemctl restart systemd-resolved
systemd-resolve --flush-caches
systemd-resolve --status

swapoff -a
sed -i '/swap/s/^/#/g' /etc/fstab

cat << EOF > /etc/sysctl.conf
net.ipv6.conf.all.disable_ipv6 = 0
net.ipv6.conf.default.disable_ipv6 = 0
net.ipv6.conf.lo.disable_ipv6 = 0
net.ipv6.conf.all.accept_dad = 0
net.ipv6.conf.default.accept_dad = 0
net.bridge.bridge-nf-call-iptables = 1
net.ipv4.conf.all.rp_filter = 0
vm.nr_hugepages = 128
EOF
sysctl -p /etc/sysctl.conf

cat << EOF > /etc/modules-load.d/ipvs.conf
overlay
br_netfilter
ip_vs
ip_vs_wrr
ip_vs_sh
ip_vs_rr
nf_conntrack
nf_conntrack_ipv4
nf_conntrack_ipv6
uio_pci_generic
EOF
sudo systemctl restart systemd-modules-load.service

# Set mtu of eth0 and eth1 devices to 1300, otherwise there may be issues when using a VPN on the host system.
cat <<EOF > /etc/systemd/system/ip-set-mtu.service
[Unit]
After=network.target
[Service]
Type=oneshot
ExecStart=/bin/bash -c 'ip link set mtu 1300 dev eth0'
ExecStart=/bin/bash -c 'ip link set mtu 1300 dev eth1'
[Install]
WantedBy=default.target
EOF
systemctl daemon-reload
systemctl enable ip-set-mtu.service
systemctl start ip-set-mtu.service
SCRIPT

$baseInstallScript = <<SCRIPT
set -x

cat <<EOF > /etc/apt/apt.conf.d/proxy.conf
Acquire {
  HTTP::proxy "#{ENV['VAGRANT_VM_PROXY']}";
  HTTPS::proxy "#{ENV['VAGRANT_VM_PROXY']}";
}
EOF

KUBELET_EXTRA_ARGS_FILE=/etc/default/kubelet
echo 'KUBELET_EXTRA_ARGS=--node-ip=#{NODE > 0 ? NODE_IP : MASTER_IP} --cni-bin-dir=/opt/cni/bin,/usr/libexec/cni' > "${KUBELET_EXTRA_ARGS_FILE}"

mkdir /etc/docker
cat <<EOF > /etc/docker/daemon.json
{
  "exec-opts": ["native.cgroupdriver=systemd"],
  "log-driver": "json-file",
  "log-opts": {
    "max-size": "100m"
  },
  "storage-driver": "overlay2"
}
EOF

retries=5
for ((i=0; i<retries; i++)); do
    apt-get update && \
    apt-get -y install apt-transport-https curl software-properties-common ca-certificates && \
        break
done
[[ $retries -eq i ]] && { echo "Failed to install apt-transport-https and other dependenices after 5 tries"; exit 1; }


curl --retry 5 -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -
add-apt-repository \
   "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
   $(lsb_release -cs) \
   stable"
curl --retry 5 -fsSL https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -
cat <<EOF > /etc/apt/sources.list.d/kubernetes.list
deb https://apt.kubernetes.io/ kubernetes-xenial main
EOF

if [ -n "#{KUBERNETES_VERSION}" ]; then
    KUBERNETES_PACKAGES="kubelet=#{KUBERNETES_VERSION}#{$kubernetes_pkg_version_suffix} kubeadm=#{KUBERNETES_VERSION}#{$kubernetes_pkg_version_suffix} kubectl=#{KUBERNETES_VERSION}#{$kubernetes_pkg_version_suffix}"
else
    KUBERNETES_PACKAGES="kubelet kubeadm kubectl"
fi

retries=5
for ((i=0; i<retries; i++)); do
    apt-get update && \
    apt-get -y install tmux screen telnet conntrack socat net-tools docker-ce=#{$docker_version} ${KUBERNETES_PACKAGES} && \
        break
done
[[ $retries -eq i ]] && { echo "Failed to install docker, kubelet, kubeadm and other dependenices after 5 tries"; exit 1; }

apt-mark hold kubelet kubeadm kubectl

# Increase /run dir as it is/was a problem on Ubuntu 18.04 (at least on bento box image)
echo 'tmpfs /run tmpfs rw,nosuid,noexec,relatime,size=614460k,mode=755' >> /etc/fstab
SCRIPT


$verifyNodeScript = <<SCRIPT
docker version || { echo "Something wrong with docker"; exit 1; }
kubeadm version || { echo "Something wrong with kubeadm"; exit 1; }
kubelet --version || { echo "Something wrong with kubelet"; exit 1; }
SCRIPT

$kubeMasterScript = <<SCRIPT
set -x
kubeadm reset -f

retries=5
for ((i=0; i<retries; i++)); do
    # For now ignore SystemVerification error
    kubeadm init \
        #{$kubeadm_init_flags} \
        --ignore-preflight-errors=SystemVerification \
        --apiserver-advertise-address=#{MASTER_IP} \
        --pod-network-cidr=#{POD_NW_CIDR} \
        --token "#{KUBETOKEN}" \
        --token-ttl 0 && \
        break
    echo "kubeadm join failed, trying again in 3 seconds (try ${i}/${retries})..."
    sleep 3
done
[[ $retries -eq i ]] && { echo "Failed to run kubeadm init after 5 tries"; exit 1; }

mkdir -p $HOME/.kube
cp -Rf /etc/kubernetes/admin.conf $HOME/.kube/config
chown $(id -u):$(id -g) $HOME/.kube/config

echo "Done."
SCRIPT

$kubeMinionScript = <<SCRIPT
set -x
kubeadm reset -f

retries=5
for ((i=0; i<retries; i++)); do
    # For now ignore SystemVerification error
    kubeadm join \
        #{$kubeadm_join_flags} \
        --ignore-preflight-errors=SystemVerification \
        --discovery-token-unsafe-skip-ca-verification \
        --token "#{KUBETOKEN}" \
        "#{MASTER_IP}:6443" && \
        break
    echo "kubeadm join failed, trying again in 3 seconds (try ${i}/${retries})..."
    sleep 3
done
[[ $retries -eq i ]] && { echo "Failed to run kubeadm join after 5 tries"; exit 1; }

echo "Done."
SCRIPT

# Addons
$kubeDashScript = <<SCRIPT
# Kubernetes Dashboard Setup
kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/#{K8S_DASHBOARD_VERSION}/src/deploy/recommended/kubernetes-dashboard.yaml
SCRIPT


